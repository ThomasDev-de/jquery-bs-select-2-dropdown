!function (e) { function t(t) { if (t.closest(".dropdown").length) return t.closest(".dropdown"); const n = t.data("options"), l = !1 !== t.prop("multiple"); let d = t.val(), a = ""; l && (a = 'data-bs-auto-close="outside"'); let i = []; n.dropUp && i.push("dropup"), n.dropEnd && i.push("dropend"), n.dropStart && i.push("dropstart"), n.dropCenter && i.push("dropdown-center"); let r = e("<div>", { class: "dropdown js-bs-select-dropdown " + i.join(" "), html: `\n\t\t\t\t<div class="${n.btnClass} form-select border d-flex flex-nowrap align-items-center" ${a} href="#" role="button" data-bs-toggle="dropdown"\n                    aria-expanded="false" style="width:${n.btnWidth}">\n                <div class="js-dropdown-header flex-fill text-start">${n.btnEmptyText}</div>\n\n                </div>` }).insertAfter(t); r.closest(".fixed-table-body:not(.overflow-visible)").length && r.closest(".fixed-table-body").addClass("overflow-visible"), r.on("hide.bs.dropdown", (function () { n.debug && console.log("hide.bs.select"), t.trigger("hide.bs.select") })).on("hidden.bs.dropdown", (function () { n.debug && console.log("hidden.bs.select"), t.trigger("hidden.bs.select") })).on("show.bs.dropdown", (function () { n.debug && console.log("show.bs.select"), t.trigger("show.bs.select"), e(".js-bs-select-dropdown .dropdown-menu.show").length && e(".js-bs-select-dropdown .dropdown-menu.show").closest(".dropdown").dropdown("hide") })).on("shown.bs.dropdown", (function () { n.debug && console.log("shown.bs.select"), t.trigger("shown.bs.select"), t.closest(".dropdown").find('[type="search"]').length && t.closest(".dropdown").find('[type="search"]').focus() })), t.appendTo(r), t.val(d), t.hide(); let c = n.darkMenu ? "dropdown-menu-dark" : ""; const p = e("<div>", { class: "dropdown-menu mt-1 py-0 " + c }).appendTo(r); let u = "", h = n.darkMenu ? "btn-close-white" : "", f = "", b = ""; n.search && (u = `<input type="search" autocomplete="off" class="form-control form-control-sm me-auto" placeholder="${n.searchPlaceholder}">`), l && (f = `<button type="button" class="btn-close ${h} ms-2" data-bs-dismiss="dropdown" aria-label="Close"></button>`, n.showActionMenu && (b = `\n\t\t\t\t\t\t<div class="btn-group btn-group-sm mt-2 p-0">\n\t\t\t\t\t\t\t<a href="#" class="btn ${n.actionMenuBtnSelectAllClass} p-0 js-select-select-all">${n.selectAllText}</a>\n\t\t\t\t\t\t\t<a href="#" class="btn ${n.actionMenuBtnDeSelectAllClass} p-0 js-select-select-none">${n.deselectAllText}</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`)); let g = ""; "" === u && "" === f && "" === b || (g = "px-2 pb-2 pt-2 border-bottom"), e(`\n\t\t\t<div class="d-flex flex-column ${g}">\n\t            <div class="d-flex  justify-content-end align-items-center">\n\t                ${u}\n\t                ${f}\n\t            </div>\n\t            ${b}\n            </div>\n            `).appendTo(p), null !== n.menuPreHtml && (e("<div>", { html: n.menuPreHtml, class: "text-muted p-3 fs-6" }).appendTo(p), e('<hr class="dropdown-divider mt-0">').appendTo(p)); const m = e(`<div style="overflow-y:scroll;height:${n.dropDownListHeight}px;"></div>`).appendTo(p); p.find('[type="search"]').prop("autocomplete", "off"); let w = 0, v = !1; return t.find("optgroup, option").each((function (t, s) { if (e(this).is("optgroup")) return void e(`<h6 class="dropdown-header text-uppercase text-start my-0 w-100 rounded-0 py-1 ${n.dropHeaderClass}">${e(this).attr("label")}</h6>`).appendTo(m); let o = e(s), a = o.get(0).className.trim(), i = o.prop("value"), r = 0 !== o.closest("optgroup").length, c = o.prop("disabled") ? "disabled" : ""; if (!i || "" === i) return; let p = "", u = "d-none"; !1 !== i && (l ? (p = e.inArray(i, d) > -1 ? "active" : "", u = e.inArray(i, d) > -1 ? "" : "d-none") : (p = d === i ? "active" : "", u = "d-none")); let h = n.showSubtext && o.data("subtext") ? `<small class="text-muted mx-2">${o.data("subtext")}</small>` : "", f = o.data("icon") ? `<i class="${o.data("icon")}"></i> ` : "", b = r ? "ps-3" : ""; v && !r && e('<hr class="dropdown-divider">').appendTo(m), e("<div>", { tabindex: w, class: a, html: `\n                <div class="dropdown-item ${p} ${c}  d-flex justify-content-between ${n.dropDownItemClass} " data-index="${w}" href="#" style="cursor: pointer;">\n                     <div class="${b}">${f}${o.text()}</div>\n\t\t\t\t\t ${h}\n\t\t\t\t\t <div class="${u} dropdown-item-select-icon ms-1 float-end ${n.selectIconClass}">${n.selectIcon}</div>\n                </div>` }).appendTo(m), v = r, w++ })), null !== n.menuAppendHtml && (e('<hr class="dropdown-divider">').appendTo(m), e("<div>", { html: n.menuAppendHtml, class: "text-muted fs-6", css: { padding: "4px 16px" } }).appendTo(m)), r.on("click", ".js-select-select-all", (function (e) { e.preventDefault(), t.find("option").prop("selected", !0), o(t), t.trigger("change.bs.select"), t.bsSelectDrop("show") })).on("click", ".js-select-select-none", (function (e) { e.preventDefault(), t.find("option").prop("selected", !1), o(t), t.trigger("change.bs.select"), t.bsSelectDrop("show") })).on("hidden.bs.dropdown", (function () { let t = e(this).find('[type="search"]'); t.length && t.val(null).trigger("keyup") })).on("keyup", '[type="search"]', (function () { let t = e(this).val().trim(), s = r.find("[data-index]"); "" !== t ? s.each((function (s, n) { e(n).text().trim().toUpperCase().indexOf(t.toUpperCase()) > -1 ? e(n).removeClass("d-none") : e(n).addClass("d-none") })) : s.removeClass("d-none") })).on("click", '[data-bs-dismiss="dropdown"]', (function (t) { e(t.currentTarget).closest(".dropdown").find('[data-bs-toggle="dropdown"]').dropdown("hide") })).on("click", ".dropdown-item", (function (o) { o.preventDefault(), l || r.find(".dropdown-item.active").removeClass("active"), e(o.currentTarget).toggleClass("active"), l && e(o.currentTarget).find(".dropdown-item-select-icon").toggleClass("d-none"); let d = []; r.find(".dropdown-item.active").each((function (s, n) { let o = t.find("option:eq(" + e(n).data("index") + ")").prop("value"); !1 !== o && d.push(o) })), l ? t.val(d) : d.length ? t.val(d[0]) : t.val(null), n.debug && console.log(t.val()), s(t), t.trigger("change") })), s(t), r } function s(e) { let t = e.data("options"); const s = e.closest(".js-bs-select-dropdown").find(".js-dropdown-header"); let n, o = e.val(), l = ""; if (o && o.length && "" !== o && e.find("option:selected").length) if (Array.isArray(o)) if (1 === o.length) { let t = e.find(`option[value="${o[0]}"]`), s = t.closest("optgroup").length && t.data("subtext") ? `<small class="text-muted mx-2">${t.data("subtext")}` : ""; n = `<span>${t.data("icon") ? `<i class="${t.data("icon")}"></i> ` : ""}${t.text()}</span><small class="text-muted ms-2">${s}</small>`, l = t.text() } else if (t.showSelectionAsList) { let t = [], s = []; o.forEach((n => { let o = e.find(`option[value="${n}"]`), l = o.closest("optgroup").length && o.data("subtext") ? o.data("subtext") : "", d = o.data("icon") ? `<i class="${o.data("icon")}"></i> ` : ""; t.push(`<div><span>${d}${o.text()}</span><small class="text-muted ms-2">${l}</small></div>`), s.push(o.text()) })), n = `<div class="d-flex flex-column">${t.join("")}</div>`, l += s.join(",") } else { let s = e.find("option").length; n = t.showSelectedText(o.length, s); let d = []; o.forEach((t => { let s = e.find(`option[value="${t}"]`); d.push(s.text()) })), l += d.join(",") } else { let s = e.find(`option[value="${o}"]`); if (s.hasClass("d-none")) n = t.btnEmptyText; else { let e = s.closest("optgroup").length && s.data("subtext") ? `<small class="text-muted ms-2">${s.data("subtext")}` : ""; n = `<span>${s.data("icon") ? `<i class="${s.data("icon")}"></i> ` : ""}${s.text()}</span><small class="text-muted mx-2">${e}</small>`, l = s.text() } } else n = t.btnEmptyText; s.html(n), s.attr("title", l) } function n(e, t) { let s = e.val(), n = e.closest(".js-bs-select-dropdown"); e.insertBefore(n), e.val(s), n.remove(), t && e.show() } function o(e) { n(e, !1), t(e) } e.bsSelectDrop = { setDefaults: function (t) { this.DEFAULTS = e.extend(!0, this.DEFAULTS, t || {}) }, setDefault: function (e, t) { this.DEFAULTS[e] = t }, getDefaults: function () { return this.DEFAULTS }, DEFAULTS: { btnWidth: "fit-content", btnEmptyText: "Please select..", dropUp: !1, dropStart: !1, dropEnd: !1, dropCenter: !1, dropHeaderClass: "text-bg-secondary", btnClass: "btn-outline-secondary", search: !0, darkMenu: !1, menuPreHtml: null, menuAppendHtml: null, showSubtext: !0, showActionMenu: !0, actionMenuBtnSelectAllClass: "btn-link", actionMenuBtnDeSelectAllClass: "btn-link", showSelectionAsList: !1, showSelectedText: function (e, t) { return `${e}/${t} ausgewählt` }, deselectAllText: "Deselect All", selectAllText: "Select All", dropDownListHeight: 300, selectIconClass: "", selectIcon: "", debug: !1, dropDownItemClass: "", searchPlaceholder: "Search.." } }, e.fn.bsSelectDrop = function (l, d) { let a = !1, i = !1; if ("string" == typeof l) a = !0; else i = !0; return e(this).each((function (r, c) { const p = e(c); if (i && p.data("options", e.extend(!0, e.bsSelectDrop.DEFAULTS, p.data(), l || {})), t(p), a) switch (l) { case "hide": !function (e) { let t = e.closest(".dropdown"); t.length && t.dropdown("hide") }(p); break; case "show": !function (e) { let t = e.closest(".dropdown"); t.length && t.dropdown("show") }(p); break; case "val": p.val(d), function (e) { const t = e.closest(".js-bs-select-dropdown"); t.find(".dropdown-item.active").removeClass("active"); let n = e.val(); Array.isArray(n) || (n = [n]), n.forEach((s => { let n = e.find(`option[value="${s}"]`).index(); t.find(`.dropdown-item[data-index="${n}"]`).addClass("active") })), e.trigger("change"), s(e) }(p), o(p), p.trigger("change.bs.select"); break; case "destroy": n(p, !0), p.trigger("destroy.bs.select"); break; case "updateOptions": p.data("options", e.extend(!0, e.bsSelectDrop.DEFAULTS, p.data("options"), d || {})), o(p), p.trigger("update.bs.select"); break; case "refresh": o(p), p.trigger("refresh.bs.select") }return p })) }, e('[data-bs-toggle="select"]').bsSelectDrop() }(jQuery);